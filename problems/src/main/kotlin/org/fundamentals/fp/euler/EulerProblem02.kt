package org.fundamentals.fp.euler;

/**
 * https://projecteuler.net/problem=2
 *
 * Original:
 *
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms.
 * By starting with 1 and 2, the first 10 terms will be:
 *
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 *
 * By considering the terms in the Fibonacci sequence whose values
 * do not exceed four million, find the sum of the even-valued terms.
 *
 * Further information about a Fibonacci serie:
 * https://en.wikipedia.org/wiki/Fibonacci_number
 *
 * Scenario 100:
 *
 * Given a Fibonacci sequence:
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89
 *
 * When execute sumEven method
 * Then find the sum of the even-valued terms
 *
 */
fun KotlinSolution02(limit : Long) : Long {

    val TWO = 2
    val isMultiple = { l: Int, i: Int -> l % i == 0 }
    val isMultiple2 = { number: Int -> isMultiple(number, TWO) }

    return UtilsKotlin.fibonnacci(limit)
            .filter { isMultiple2(it) }
            //.onEach { println("$it") }
            .sum()
            .toLong()
}