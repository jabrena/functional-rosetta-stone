package info.jab.fp.euler;

import java.math.BigInteger;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.stream.IntStream;
import java.util.stream.Stream;

/**
 * Problem 29: Distinct powers
 * Consider all integer combinations of ab for 2   a   5 and 2   b   5:
 *
 * 22=4, 23=8, 24=16, 25=32
 * 32=9, 33=27, 34=81, 35=243
 * 42=16, 43=64, 44=256, 45=1024
 * 52=25, 53=125, 54=625, 55=3125
 *
 * If they are then placed in numerical order, with any repeats removed,
 * we get the following sequence of 15 distinct terms:
 *
 * 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
 *
 * How many distinct terms are in the sequence generated by
 * ab for 2   a   100 and 2   b   100?
 *
 */
public class EulerProblem29 {

    BiFunction<Long, BigInteger, Stream<BigInteger>> square = (limit, i) ->
            IntStream.rangeClosed(2, limit.intValue()).boxed()
                .map(l -> i.pow(l));

    Function<Long, Stream<Long>> generateSerie = limit ->
            IntStream.rangeClosed(2, limit.intValue()).boxed()
                .map(BigInteger::valueOf)
                .flatMap(bi -> square.apply(limit, bi))
                .distinct()
                .sorted()
                .map(BigInteger::longValue);

    public long javaStreamSolution(long limit) {

         return generateSerie.apply(limit).count();
    }

}
